import pandas as pd
import dash
import dash_core_components as dcc
import dash_html_components as html
import plotly.express as px
import plotly.graph_objects as go
import gunicorn

app = dash.Dash(__name__)
server = app.server
June = pd.read_csv('/Users/avonleafisher/Downloads/June.csv')
July = pd.read_csv('/Users/avonleafisher/Downloads/July.csv')
August = pd.read_csv('/Users/avonleafisher/Downloads/August.csv')
September = pd.read_csv('/Users/avonleafisher/Downloads/September.csv')
October = pd.read_csv('/Users/avonleafisher/Downloads/October.csv')
November = pd.read_csv('/Users/avonleafisher/Downloads/November.csv')
ind_with_avg_calls = pd.read_csv('/Users/avonleafisher/Downloads/indicators_with_avg.csv')
noise_r = pd.read_csv('/Users/avonleafisher/Downloads/noiser.csv')
noise_v = pd.read_csv('/Users/avonleafisher/Downloads/noisev.csv')
noise_c = pd.read_csv('/Users/avonleafisher/Downloads/noisec.csv')
noise_s = pd.read_csv('/Users/avonleafisher/Downloads/noises.csv')
noise = pd.read_csv('/Users/avonleafisher/Downloads/noise.csv')
noncompliance = pd.read_csv('/Users/avonleafisher/Downloads/noncompliance.csv')
mgc = pd.read_csv('/Users/avonleafisher/Downloads/mgc.csv')

df = pd.read_csv('/Users/avonleafisher/Downloads/community_board_311.csv')
x = list(df["agency"].value_counts())
y = list(df["agency"].value_counts().index)

x.reverse()
y.reverse()

count_dict = {"Total Calls": x, "Agency": y}
count_df = pd.DataFrame(count_dict, columns=["Total Calls", "Agency"])
fig = px.bar(count_df, x="Total Calls", y="Agency",
             orientation='h',
             height=700, color="Total Calls",
             color_discrete_sequence=px.colors.sequential.thermal)

fig.update_layout(hovermode='x',
                  title="311 Call Counts by Agency",
                  font=dict(family="silom", size=14, color="#58508d"))
x1 = list(df["complaint_type"].value_counts()[0:30])
y1 = list(df["complaint_type"].value_counts()[0:30].index)

x1.reverse()
y1.reverse()

count_dict1 = {"Total Calls": x1, "Complaint Type": y1}

count_df1 = pd.DataFrame(count_dict1, columns=["Total Calls", "Complaint Type"])

fig1 = px.bar(count_df1, x="Total Calls", y="Complaint Type",
             orientation='h',
             height=700, color = "Total Calls",
             color_discrete_sequence = px.colors.sequential.thermal)

fig1.update_layout(hovermode='x',
                  title="Top 30 Most Frequent 311 Complaint Types",
                  font=dict(family="silom",
                  size=14, color="#58508d"))

fig2 = px.scatter(ind_with_avg_calls, x="community_board",
                 y="Avg daily calls per sqmi", color="Borough", height=700,
                 size='crime_per_1000', size_max=90, color_discrete_sequence=[
                                        "lightsalmon", "lightseagreen",
                                        "lightskyblue", "lightpink",
                                        "lightslategray"])

fig2.update_layout(hovermode='x',
                  title="Average Daily 311 Calls/Sq Mile",
                  xaxis_title="Community Board",
                  font=dict(family="silom",
                  size=14, color="#58508d",
                  ))

fig2.update_layout(legend=dict(
    yanchor="top",
    y=0.99,
    xanchor="right",
    x=0.99
))

def plot_calls(month_df, month):
    fig = px.density_mapbox(month_df, lat=month_df['latitude'],
                            lon=month_df['longitude'],
                            radius=2,
                            animation_frame=month_df["day"],
                            hover_name=None,
                            width=550, height=550,
                            hover_data=['complaint_type', 'community_board'],
                            color_continuous_scale=px.colors.sequential.Inferno
                            )
    fig.update_layout(mapbox_style="carto-positron", mapbox_zoom=8.5,
                      mapbox_center={"lat": 40.6885, "lon": -73.93211}, )

    fig.layout.coloraxis.showscale = False

    fig.update_layout(title={
        'text': 'Call Volume in {}'.format(month),
        'x': 0.5,
        'xanchor': 'center',
        'yanchor': 'top'}),

    font = dict(family="silom",
                size=14, color="#58508d")

    fig.update_layout(transition={'duration': 10})

    return fig

june_fig=plot_calls(June,'June')
july_fig=plot_calls(July,'July')
august_fig=plot_calls(August,'August')
september_fig=plot_calls(September,'September')
october_fig=plot_calls(October,'October')
november_fig=plot_calls(November,'November')

fig3 = go.Figure()

fig3.add_trace(go.Scatter(
    x=noise_r.index, y=noise_r['Noise - Residential'],
    hoverinfo='x+y',
    mode='lines',
    line=dict(width=0.5, color='#003f5c'), name="Noise - Residential",
    stackgroup='one'
))

fig3.add_trace(go.Scatter(
    x=noise_s.index, y=noise_s['Noise - Street/Sidewalk'],
    hoverinfo='x+y',
    mode='lines',
    line=dict(width=0.5, color='#58508d'), name='Noise - Street/Sidewalk',
    stackgroup='two'
))

fig3.add_trace(go.Scatter(
    x=noise_v.index, y=noise_v['Noise - Vehicle'],
    hoverinfo='x+y',
    mode='lines',
    line=dict(width=0.5, color='#bc5090'), name='Noise - Vehicle',
    stackgroup='three'
))

fig3.add_trace(go.Scatter(
    x=noise_c.index, y=noise_c['Noise - Commercial'],
    hoverinfo='x+y',
    mode='lines',
    line=dict(width=0.5, color='#ffa600'), name='Noise - Commercial',
    stackgroup='four'
))

fig3.update_layout(legend=dict(
    yanchor="top",
    y=0.99,
    xanchor="left",
    x=0.01
))

fig3.update_layout(title="Noise",
                  xaxis_title="Date",
                  yaxis_title="Total Calls",
                  height=700,
                  font=dict(family="silom",
                            size=14, color="#58508d"))

fig4 = go.Figure()

fig4.add_trace(go.Scatter(
    x=noncompliance.index, y=noncompliance['Noncompliance With Phased Reopening'],
    hoverinfo='x+y',
    mode='lines',
    line=dict(width=0.5, color='#FF0000'), name='Noncompliance W/ Phased Reopening',
    stackgroup='one'
))

fig4.add_trace(go.Scatter(
    x=mgc.index, y=mgc['Mass Gathering Complaint'],
    hoverinfo='x+y',
    mode='lines',
    line=dict(width=0.5, color='#000000'), name="Mass Gathering Complaint",
    stackgroup='two'
))

fig4.update_layout(legend=dict(
    yanchor="top",
    y=0.99,
    xanchor="left",
    x=0.01
))

fig4.update_layout(title="COVID-19",
                  xaxis_title="Date",
                  yaxis_title="Total Calls",
                  height=700,
                  font=dict(family="silom",
                            size=14, color="#58508d"))

app.layout = html.Div(className='row', children=[
    html.H1('NYC 311 Data Explorer (June 2020-Present)', style={'color': '#6b508f', 'fontSize': 35, 'text-align':'center'}),
    html.Div(children=[
        dcc.Graph(id="graph1", figure=june_fig, style={'display': 'inline-block', 'backgroundColor':'blue'}),
        dcc.Graph(id="graph2", figure=july_fig, style={'display': 'inline-block', 'backgroundColor':'blue'}),
        dcc.Graph(id="graph3", figure=august_fig, style={'display': 'inline-block', 'backgroundColor':'blue'}),
        dcc.Graph(id="graph4", figure=september_fig, style={'display': 'inline-block', 'backgroundColor':'blue'}),
        dcc.Graph(id="graph5", figure=october_fig, style={'display': 'inline-block', 'backgroundColor':'blue'}),
        dcc.Graph(id="graph6", figure=november_fig, style={'display': 'inline-block', 'backgroundColor':'blue'}),
        dcc.Graph(id="graph7", figure=fig1),
        dcc.Graph(id="graph8", figure=fig),
        dcc.Graph(id="graph9", figure=fig2),
        dcc.Graph(id="graph10", figure=fig3),
        dcc.Graph(id="graph11", figure=fig4),

    ])
])

if __name__ == '__main__':
    app.run_server(debug=True)
